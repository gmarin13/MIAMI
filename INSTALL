===========================
MIAMI Building Instructions
===========================

MIAMI uses a simple build system. It uses one configuration file,
<MIAMI_ROOT>/miami.config, that must be edited to set the proper
dependencies for your local system.

1. Copy the file miami.config.sample to miami.config in the MIAMI root
folder and edit it. 

MIAMI has two external dependencies, PIN and binutils.

2. Set PIN_HOME to point to the root folder of a recent PIN kit. MIAMI has 
been tested with the most recent PIN version, 2.13-62732 as of this writing. 
Slightly older versions are also supported, but not versions older than 
2.12-58423 that have a different build system. PIN can be downloaded from
http://software.intel.com/en-us/articles/pintool-downloads.

3. Set BINUTILS_HOME to point to the root folder of a binutils installation. 
MIAMI links against two binutils libraries, libbfd and libiberty, so make
sure that your binutils installation has these two libraries or that they
are installed in one of the default system directories.
Binutils can be downloaded from http://www.gnu.org/software/binutils/.

4. Optionally, set CC and CXX to point to your preferred GNU C and C++ 
compilers.

5. The build system attempts to auto-discover the root directory of the
MIAMI framework and stores this path in the variable MIAMI_HOME. If the
auto-discovery fails, users should set the MIAMI_HOME variable manually.


To compile all of the MIAMI components, type 'make' in the root directory:
$ make

This command will compile all the required source files and place the MIAMI
binaries, libraries and wrappers in the bin/ subfolder.

MIAMI can also be installed out-of-tree. For this, invoke make with
variable MIAMI_TARGET defined to point to your desired installation
folder:
$ make MIAMI_TARGET=<path_to_install_target>

See doc/README.txt for instructions on how to use the tools and for a brief
introduction to interpreting the performance metrics.
